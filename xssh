#!/usr/bin/env python

# xssh = eXperimental Secure Shell
# This is based on some code shown in:
#
#     http://stackoverflow.com/questions/12354047/x11-forwarding-with-paramiko

import fcntl
import os
import paramiko
import select
import socket
import sys
#import Xlib.support.connect as xlib_connect

def main():
    paramiko.util.log_to_file("/tmp/paramiko.log")
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect("betty.local", username="ubuntu", password='ubuntu')

    transport = ssh_client.get_transport()
    print("transport=", transport)
    assert isinstance(transport, paramiko.Transport)
    session = transport.open_session()
    print("session=", session)
    assert isinstance(session, paramiko.Channel)
    run(transport, session, "xterm -fn 9x15")
    #run(transport, session, "ls")  # Does not work!


# This piece of code was basically copied out of the Python Xlib for
# X11 support because we do not want a dependency on the Xlib library.
# It basically returns an open socket connect to the local X11 server.
def get_socket(dname, host, dno):
    print("=>get_socket()")
    try:
	# If hostname (or IP) is provided, use TCP socket
	print("host=", host)
	if host:
	    print("host specified")
	    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	    s.connect((host, 6000 + dno))

	# Else use Unix socket
	else:
	    print("no host specified")
	    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	    print("s=", s)
	    s.connect('/tmp/.X11-unix/X%d' % dno)
	    print("here 2")
    except:
	print("socket error")
	raise error.DisplayConnectionError(dname, "?")

    # Make sure that the connection isn't inherited in child processes
    fcntl.fcntl(s.fileno(), fcntl.F_SETFD, fcntl.FD_CLOEXEC)

    print("<=get_socket():", s)
    return s

def run(transport, session, command):
    assert isinstance(transport, paramiko.Transport)
    assert isinstance(session, paramiko.Channel)
    assert isinstance(command, str)


    def x11_handler(channel, (src_addr, src_port)):
	""" Process an incoming X11 request for *channel*. """

	assert isinstance(channel, paramiko.Channel)
	assert isinstance(src_addr, str)
	assert isinstance(src_port, int)
	print("channel=", channel)
	print("src_addr=", src_addr)
	print("src_port=", src_port)
        x11_fileno = channel.fileno()
	print("x11_fileno=", x11_fileno)
	print("*local_x11_display[:3]=", local_x11_display[:3])

	# *local_x11_display* is define the next level up routine
	# "*tuple" syntax in a function call expands to positional arguments:
	# Thus, the comment out line immediately below is just a short hand for
	# the following line which is not commented out::
        #local_x11_channel = xlib_connect.get_socket(*local_x11_display[:3])
	#local_x11_channel = xlib_connect.get_socket(
	#  local_x11_display[0], local_x11_display[1], local_x11_display[2])
        local_x11_channel = get_socket(
	  local_x11_display[0], local_x11_display[1], local_x11_display[2])

	print("local_x11_channel=", local_x11_channel)
	#assert isinstance(local_x11_channel, socket._socketobject)
	
        local_x11_fileno = local_x11_channel.fileno()
	print("local_x11_fileno=", local_x11_fileno)
	assert isinstance(local_x11_fileno, int)

        # Register both x11 and local_x11 channels
        channels[x11_fileno] = channel, local_x11_channel
        channels[local_x11_fileno] = local_x11_channel, channel
	print("channels=", channels)

	# Setup a select.
        poller.register(x11_fileno, select.POLLIN)
        poller.register(local_x11_fileno, select.POLLIN)

        transport._queue_incoming_channel(channel)

    def flush_out(channel):
        while channel.recv_ready():
            sys.stdout.write(channel.recv(4096))
        while channel.recv_stderr_ready():
            sys.stderr.write(channel.recv_stderr(4096))

    def display_parse():
	# This DISPLAY enviornment variable has the following form:
	#
	#    [host]:dno[.screen]
	#
	# where host is the host name and can be empty, dno is the display
	# number (usually 0) and screen is an optiona sub-screen (usually
	# .0 or ommitted).
	#
	# The piece of code below calls the Xlib parser for the Display
	# environment variable:
	#
	#    local_x11_display = xlib_connect.get_display(os.environ['DISPLAY'])
	#
	# which returns a quad tuple of the form:
	#
	#    ("display_env_var", "host", dno, screen)
	# 
	# where:
	# * "display_env_var" is the original display environment variable
	# * "host" is the host name
	# * dno is an integer display number
	# * screen is the screen number
	#
	# Since we do not want a dependency on the X11 library, we do it
	# ourselves:

	display_variable = os.environ['DISPLAY']
	host_rest = display_variable.split(':')
	host = host_rest[0]
	rest = host_rest[1]
	dno_screen = rest.split(".")
	if len(dno_screen) == 0:
	    dno = 0
	    screen = 0
	elif len(dno_screen) == 1:
	    dno = int(dno_screen[0])
	    screen = 0
	else:
	    dno = int(dno_screen[0])
	    screen = int(dno_screen[0])
	quad_tuple = (display_variable, host, dno, screen)
	print("quad_tuple=", quad_tuple)
	return quad_tuple

    local_x11_display = display_parse()
    channels = {}
    poller = select.poll()
    print("poller=", poller)
    #assert isinstance(poller, select.poll)
    session_fileno = session.fileno()
    poller.register(session_fileno)

    # Set up x11_handler to handle all incoming X11 connections:
    session.request_x11(handler=x11_handler)
    session.exec_command(command)
    transport.accept()

    # event loop
    while not session.exit_status_ready():
        poll = poller.poll()
	# *poll* contains a list of (fd, event) tuples:
        if not poll: # this should not happen, as we don't have a timeout.
            break
        for fd, event in poll:
            if fd == session_fileno:
                flush_out(session)
            # data either on local/remote x11 channels/sockets
            if fd in channels.keys():
                sender, receiver = channels[fd]
                try:
                    receiver.sendall(sender.recv(4096))
                except:
                    sender.close()
                    receiver.close()
                    channels.remove(fd)

    flush_out(session)
    return session.recv_exit_status()

if __name__ == '__main__':
    main()
